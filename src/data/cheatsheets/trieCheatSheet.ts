import { CheatSheetItem, createCheatSheet } from '@/common/commonCheatSheet';

export const trieCheatSheet: CheatSheetItem[] = [
  createCheatSheet(
    'Creating a Trie',
    'class TrieNode:\n  def __init__(self):\n    self.children = {}\n    self.is_end_of_word = False\n\nclass Trie:\n  def __init__(self):\n    self.root = TrieNode()',
    'Initializes a Trie with a root node.',
    'create',
    'O(1)',
    'Memory usage can be significant if the Trie stores a large number of words.',
  ),
  createCheatSheet(
    'Inserting a word',
    'def insert(self, word):\n  node = self.root\n  for char in word:\n    if char not in node.children:\n      node.children[char] = TrieNode()\n    node = node.children[char]\n  node.is_end_of_word = True',
    'Inserts a word into the Trie.',
    'add',
    'O(m)',
    'Inserting a word with a large number of characters can be slow.',
  ),
  createCheatSheet(
    'Searching for a word',
    'def search(self, word):\n  node = self.root\n  for char in word:\n    if char not in node.children:\n      return False\n    node = node.children[char]\n  return node.is_end_of_word',
    'Searches for a word in the Trie.',
    'search',
    'O(m)',
    'Searching for a word with a large number of characters can be slow.',
  ),
  createCheatSheet(
    'Prefix search',
    'def starts_with(self, prefix):\n  node = self.root\n  for char in prefix:\n    if char not in node.children:\n      return False\n    node = node.children[char]\n  return True',
    'Checks if there is any word in the Trie that starts with the given prefix.',
    'search',
    'O(m)',
    'Prefix search with a large number of characters can be slow.',
  ),
  createCheatSheet(
    'Deleting a word',
    'def delete(self, word):\n  def _delete_helper(node, word, index):\n    if index == len(word):\n      if not node.is_end_of_word:\n        return False\n      node.is_end_of_word = False\n      return len(node.children) == 0\n    char = word[index]\n    if char not in node.children:\n      return False\n    should_delete_current_node = _delete_helper(node.children[char], word, index + 1)\n    if should_delete_current_node:\n      del node.children[char]\n      return len(node.children) == 0\n    return False\n  _delete_helper(self.root, word, 0)',
    'Deletes a word from the Trie.',
    'remove',
    'O(m)',
    'Deleting a word with a large number of characters can be slow.',
  ),
  createCheatSheet(
    'Finding all words with a prefix',
    'def find_all_words(self, prefix):\n  def _dfs(node, prefix, words):\n    if node.is_end_of_word:\n      words.append(prefix)\n    for char, child_node in node.children.items():\n      _dfs(child_node, prefix + char, words)\n  words = []\n  node = self.root\n  for char in prefix:\n    if char not in node.children:\n      return words\n    node = node.children[char]\n  _dfs(node, prefix, words)\n  return words',
    'Finds all words in the Trie that start with the given prefix.',
    'search',
    'O(m + n)',
    'Finding all words with a prefix can be slow if the Trie is large.',
  ),
  createCheatSheet(
    'Counting words',
    'def count_words(self):\n  def _count_helper(node):\n    count = 0\n    if node.is_end_of_word:\n      count += 1\n    for child in node.children.values():\n      count += _count_helper(child)\n    return count\n  return _count_helper(self.root)',
    'Counts the total number of words in the Trie.',
    'utility',
    'O(n)',
    'Counting words in a large Trie can be slow.',
  ),
  createCheatSheet(
    'Finding the longest prefix',
    'def longest_prefix(self):\n  def _longest_prefix_helper(node, prefix):\n    if len(node.children) != 1 or node.is_end_of_word:\n      return prefix\n    char = next(iter(node.children))\n    return _longest_prefix_helper(node.children[char], prefix + char)\n  if not self.root.children:\n    return ""\n  return _longest_prefix_helper(next(iter(self.root.children)), "")',
    'Finds the longest common prefix among all words in the Trie.',
    'utility',
    'O(m)',
    'Finding the longest prefix can be slow if the Trie is large.',
  ),
  createCheatSheet(
    'Checking if the Trie is empty',
    'def is_empty(self):\n  return not self.root.children',
    'Checks if the Trie is empty (contains no words).',
    'utility',
    'O(1)',
    'N/A',
  ),
  createCheatSheet(
    'Clearing the Trie',
    'def clear(self):\n  self.root = TrieNode()',
    'Clears all words from the Trie, making it empty.',
    'remove',
    'O(1)',
    'Clearing the Trie does not free up memory immediately.',
  ),
];
