import { CheatSheetItem, createCheatSheet } from '@/common/commonCheatSheet';

export const tupleCheatSheet: CheatSheetItem[] = [
  createCheatSheet(
    'Creating a tuple',
    'my_tuple = (1, 2, 3)',
    'Initializes a tuple with the elements 1, 2, and 3.',
    'create',
    'O(n)',
    'If the tuple is very large, memory usage can be significant.',
  ),
  createCheatSheet(
    'Tuple packing',
    'my_tuple = 1, 2, 3',
    'Creates a tuple by packing the values 1, 2, and 3.',
    'create',
    'O(n)',
    'Tuple packing can be more concise but may be less readable.',
  ),
  createCheatSheet(
    'Tuple unpacking',
    'a, b, c = my_tuple',
    'Assigns the values of the tuple to variables a, b, and c.',
    'create',
    'O(n)',
    'The number of variables must match the number of elements in the tuple.',
  ),
  createCheatSheet(
    'Accessing elements',
    'my_tuple[0]',
    'Accesses the first element of the tuple (index starts at 0).',
    'access',
    'O(1)',
    'Accessing an index out of bounds will raise an error.',
  ),
  createCheatSheet(
    'Slicing a tuple',
    'my_tuple[1:3]',
    'Returns a new tuple containing elements from index 1 to 2 (3 is excluded).',
    'access',
    'O(k)',
    'Slicing a large tuple can be memory-intensive.',
  ),
  createCheatSheet(
    'Concatenating tuples',
    'my_tuple + (4, 5)',
    'Concatenates the tuple with another tuple (4, 5).',
    'modify',
    'O(n + m)',
    'Concatenating large tuples can be memory-intensive.',
  ),
  createCheatSheet(
    'Repeating a tuple',
    'my_tuple * 3',
    'Repeats the tuple 3 times.',
    'modify',
    'O(n * k)',
    'Repeating a large tuple can be memory-intensive.',
  ),
  createCheatSheet(
    'Finding the index of an element',
    'my_tuple.index(2)',
    'Returns the index of the first occurrence of the element 2.',
    'search',
    'O(n)',
    'Searching for an element not in the tuple will raise an error.',
  ),
  createCheatSheet(
    'Counting occurrences of an element',
    'my_tuple.count(2)',
    'Returns the number of times the element 2 appears in the tuple.',
    'search',
    'O(n)',
    'Counting occurrences in a large tuple can be slow.',
  ),
  createCheatSheet(
    'Check if an element exists',
    '2 in my_tuple',
    'Returns True if the element 2 is in the tuple, otherwise False.',
    'search',
    'O(n)',
    'Checking for an element in a large tuple can be slow.',
  ),
  createCheatSheet(
    'Length of a tuple',
    'len(my_tuple)',
    'Returns the number of elements in the tuple.',
    'utility',
    'O(1)',
    'N/A',
  ),
  createCheatSheet(
    'Copy a tuple',
    'new_tuple = my_tuple[:]',
    'Creates a shallow copy of the tuple.',
    'utility',
    'O(n)',
    'Copying a large tuple can be memory-intensive.',
  ),
  createCheatSheet(
    'Sorting a tuple',
    'sorted(my_tuple)',
    'Returns a new list with the elements of the tuple sorted in ascending order.',
    'modify',
    'O(n log n)',
    'Sorting a large tuple can be memory-intensive.',
  ),
  createCheatSheet(
    'Reversing a tuple',
    'my_tuple[::-1]',
    'Returns a new tuple with the elements in reverse order.',
    'modify',
    'O(n)',
    'Reversing a large tuple can be memory-intensive.',
  ),
  createCheatSheet(
    'Tuple as dictionary keys',
    'my_dict = {(1, 2): "value"}',
    'Uses a tuple as a key in a dictionary.',
    'utility',
    'O(1)',
    'Tuples are hashable and can be used as dictionary keys.',
  ),
  createCheatSheet(
    'Tuple as elements in a set',
    'my_set = {(1, 2), (3, 4)}',
    'Uses tuples as elements in a set.',
    'utility',
    'O(1)',
    'Tuples are hashable and can be used as set elements.',
  ),
  createCheatSheet(
    'Tuple comparison',
    '(1, 2) < (1, 3)',
    'Compares two tuples lexicographically.',
    'utility',
    'O(n)',
    'Tuple comparison is based on element-wise comparison.',
  ),
  createCheatSheet(
    'Tuple with a single element',
    'my_tuple = (1,)',
    'Creates a tuple with a single element.',
    'create',
    'O(1)',
    'A comma is required to distinguish a single-element tuple from a parenthesized expression.',
  ),
  createCheatSheet(
    'Tuple with no elements',
    'my_tuple = ()',
    'Creates an empty tuple.',
    'create',
    'O(1)',
    'N/A',
  ),
];
