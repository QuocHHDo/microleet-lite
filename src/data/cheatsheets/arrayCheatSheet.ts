import { CheatSheetItem, createCheatSheet } from '@/common/commonCheatSheet';

export const arrayCheatSheet: CheatSheetItem[] = [
  createCheatSheet(
    'Creating a list',
    'my_list = [1, 2, 3]',
    'Initializes a list with the elements 1, 2, and 3.',
    'create',
    'O(n)',
    'If the list is very large, memory usage can be significant.',
  ),
  createCheatSheet(
    'List comprehension',
    '[x for x in range(5)]',
    'Creates a list [0, 1, 2, 3, 4] using a concise syntax.',
    'create',
    'O(n)',
    'Nested list comprehensions can be hard to read and maintain.',
  ),
  createCheatSheet(
    'Multidimensional arrays',
    'matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]',
    'Creates a 2D array (matrix).',
    'create',
    'O(n * m)',
    'Deeply nested arrays can lead to performance issues.',
  ),
  createCheatSheet(
    'Appending to a list',
    'my_list.append(4)',
    'Adds the element 4 to the end of the list.',
    'add',
    'O(1)',
    'Appending to a list with a large number of elements can cause memory reallocation.',
  ),
  createCheatSheet(
    'Inserting at a specific index',
    'my_list.insert(1, 99)',
    'Inserts the element 99 at index 1, shifting other elements to the right.',
    'add',
    'O(n)',
    'Inserting at the beginning of a large list can be slow.',
  ),
  createCheatSheet(
    'Extending a list',
    'my_list.extend([5, 6])',
    'Adds the elements 5 and 6 to the end of the list.',
    'add',
    'O(k)',
    'Extending a list with a large number of elements can cause memory reallocation.',
  ),
  createCheatSheet(
    'Concatenate lists',
    'my_list + [7, 8]',
    'Concatenates the list with another list [7, 8].',
    'add',
    'O(n + m)',
    'Concatenating large lists can be memory-intensive.',
  ),
  createCheatSheet(
    'Removing an element by value',
    'my_list.remove(2)',
    'Removes the first occurrence of the element 2 from the list.',
    'remove',
    'O(n)',
    'Removing an element from a large list can be slow.',
  ),
  createCheatSheet(
    'Popping an element',
    'my_list.pop()',
    'Removes and returns the last element of the list.',
    'remove',
    'O(1)',
    'Popping from an empty list will raise an error.',
  ),
  createCheatSheet(
    'Popping an element at index',
    'my_list.pop(1)',
    'Removes and returns the element at index 1.',
    'remove',
    'O(n)',
    'Popping from an index out of bounds will raise an error.',
  ),
  createCheatSheet(
    'Clearing a list',
    'my_list.clear()',
    'Removes all elements from the list, making it empty.',
    'remove',
    'O(1)',
    'Clearing a list does not free up memory immediately.',
  ),
  createCheatSheet(
    'Accessing elements',
    'my_list[0]',
    'Accesses the first element of the list (index starts at 0).',
    'access',
    'O(1)',
    'Accessing an index out of bounds will raise an error.',
  ),
  createCheatSheet(
    'Slicing a list',
    'my_list[1:3]',
    'Returns a new list containing elements from index 1 to 2 (3 is excluded).',
    'access',
    'O(k)',
    'Slicing a large list can be memory-intensive.',
  ),
  createCheatSheet(
    'Accessing elements in a 2D array',
    'matrix[1][2]',
    'Accesses the element at row 1, column 2 (returns 6).',
    'access',
    'O(1)',
    'Accessing an index out of bounds will raise an error.',
  ),
  createCheatSheet(
    'Reversing a list',
    'my_list.reverse()',
    'Reverses the order of elements in the list.',
    'modify',
    'O(n)',
    'Reversing a large list can be memory-intensive.',
  ),
  createCheatSheet(
    'Sorting a list in ascending order',
    'my_list.sort()',
    'Sorts the list in ascending order.',
    'modify',
    'O(n log n)',
    'Sorting a large list can be memory-intensive.',
  ),
  createCheatSheet(
    'Sorting a list in descending order',
    'my_list.sort(reverse=True)',
    'Sorts the list in descending order.',
    'modify',
    'O(n log n)',
    'Sorting a large list can be memory-intensive.',
  ),
  createCheatSheet(
    'Flattening a 2D array',
    '[item for sublist in matrix for item in sublist]',
    'Flattens a 2D array into a 1D list.',
    'modify',
    'O(n * m)',
    'Flattening a large 2D array can be memory-intensive.',
  ),
  createCheatSheet(
    'Finding the index of an element',
    'my_list.index(3)',
    'Returns the index of the first occurrence of the element 3.',
    'search',
    'O(n)',
    'Searching for an element not in the list will raise an error.',
  ),
  createCheatSheet(
    'Counting occurrences of an element',
    'my_list.count(3)',
    'Returns the number of times the element 3 appears in the list.',
    'search',
    'O(n)',
    'Counting occurrences in a large list can be slow.',
  ),
  createCheatSheet(
    'Check if an element exists',
    '3 in my_list',
    'Returns True if the element 3 is in the list, otherwise False.',
    'search',
    'O(n)',
    'Checking for an element in a large list can be slow.',
  ),
  createCheatSheet(
    'Length of a list',
    'len(my_list)',
    'Returns the number of elements in the list.',
    'utility',
    'O(1)',
    'N/A',
  ),
  createCheatSheet(
    'Copy a list',
    'new_list = my_list.copy()',
    'Creates a shallow copy of the list.',
    'utility',
    'O(n)',
    'Copying a large list can be memory-intensive.',
  ),
];
