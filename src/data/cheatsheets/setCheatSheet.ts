import { CheatSheetItem, createCheatSheet } from '@/common/commonCheatSheet';

export const setCheatSheet: CheatSheetItem[] = [
  createCheatSheet(
    'Creating a set',
    'my_set = {1, 2, 3}',
    'Initializes a set with the elements 1, 2, and 3.',
    'create',
    'O(n)',
    'If the set is very large, memory usage can be significant.',
  ),
  createCheatSheet(
    'Set comprehension',
    '{x for x in range(5)}',
    'Creates a set {0, 1, 2, 3, 4} using a concise syntax.',
    'create',
    'O(n)',
    'Nested set comprehensions can be hard to read and maintain.',
  ),
  createCheatSheet(
    'Adding an element',
    'my_set.add(4)',
    'Adds the element 4 to the set.',
    'add',
    'O(1)',
    'Adding an element that already exists in the set has no effect.',
  ),
  createCheatSheet(
    'Updating a set with another set',
    'my_set.update({5, 6})',
    'Adds the elements 5 and 6 to the set.',
    'add',
    'O(k)',
    'Updating a set with a large number of elements can cause memory reallocation.',
  ),
  createCheatSheet(
    'Removing an element',
    'my_set.remove(2)',
    'Removes the element 2 from the set.',
    'remove',
    'O(1)',
    'Removing an element that does not exist in the set will raise an error.',
  ),
  createCheatSheet(
    'Discarding an element',
    'my_set.discard(2)',
    'Removes the element 2 from the set if it exists.',
    'remove',
    'O(1)',
    'Discarding an element that does not exist in the set has no effect.',
  ),
  createCheatSheet(
    'Popping an element',
    'my_set.pop()',
    'Removes and returns an arbitrary element from the set.',
    'remove',
    'O(1)',
    'Popping from an empty set will raise an error.',
  ),
  createCheatSheet(
    'Clearing a set',
    'my_set.clear()',
    'Removes all elements from the set, making it empty.',
    'remove',
    'O(1)',
    'Clearing a set does not free up memory immediately.',
  ),
  createCheatSheet(
    'Checking membership',
    '3 in my_set',
    'Returns True if the element 3 is in the set, otherwise False.',
    'search',
    'O(1)',
    'N/A',
  ),
  createCheatSheet(
    'Finding the union of two sets',
    'my_set.union({4, 5})',
    'Returns a new set with elements from both sets.',
    'operation',
    'O(n + m)',
    'Union of large sets can be memory-intensive.',
  ),
  createCheatSheet(
    'Finding the intersection of two sets',
    'my_set.intersection({3, 4})',
    'Returns a new set with elements common to both sets.',
    'operation',
    'O(min(n, m))',
    'Intersection of large sets can be memory-intensive.',
  ),
  createCheatSheet(
    'Finding the difference of two sets',
    'my_set.difference({3, 4})',
    'Returns a new set with elements in the first set but not in the second set.',
    'operation',
    'O(n)',
    'Difference of large sets can be memory-intensive.',
  ),
  createCheatSheet(
    'Finding the symmetric difference of two sets',
    'my_set.symmetric_difference({3, 4})',
    'Returns a new set with elements in either set but not both.',
    'operation',
    'O(n + m)',
    'Symmetric difference of large sets can be memory-intensive.',
  ),
  createCheatSheet(
    'Checking if a set is a subset',
    'my_set.issubset({1, 2, 3, 4})',
    'Returns True if all elements of the set are in the specified set.',
    'operation',
    'O(n)',
    'N/A',
  ),
  createCheatSheet(
    'Checking if a set is a superset',
    'my_set.issuperset({1, 2})',
    'Returns True if the set contains all elements of the specified set.',
    'operation',
    'O(n)',
    'N/A',
  ),
  createCheatSheet(
    'Checking if two sets are disjoint',
    'my_set.isdisjoint({4, 5})',
    'Returns True if the sets have no elements in common.',
    'operation',
    'O(n)',
    'N/A',
  ),
  createCheatSheet(
    'Length of a set',
    'len(my_set)',
    'Returns the number of elements in the set.',
    'utility',
    'O(1)',
    'N/A',
  ),
  createCheatSheet(
    'Copy a set',
    'new_set = my_set.copy()',
    'Creates a shallow copy of the set.',
    'utility',
    'O(n)',
    'Copying a large set can be memory-intensive.',
  ),
];
